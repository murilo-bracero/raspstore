openapi: 3.0.3
info:
  title: Raspstore Authentication Service
  description: REST specification of auth-service microservice endpoints.
  contact:
    email: soon@todo.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:9000/idp/
tags:
  - name: auth
    description: Operations about authentication
  - name: user
    description: Operations about user
paths:
  /v1/login:
    post:
      security:
        - loginAuth: []
      tags:
        - auth
      summary: Login
      description: |- 
        Uses Basic credentials sent in Authorization header and mfaToken
        (when enabled) to authenticate user against backend
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessLoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestLoginResponse'
        '401':
          description: Username, password or mfa token invalid
        '500':
          description: Internal Server Error
  
  /v1/refresh:
    get:
      security:
        - cookieRefreshToken: []
      tags:
        - auth
      summary: Request a new JWT using provided refreshToken
      description: Sends refreshToken as HttpOnly cookie and validates it
      operationId: refreshJwtByToken
      responses:
        '200':
          $ref: '#/components/responses/SuccessRefreshResponse'
        '401':
          description: Refresh Token is invalid or inexistent
        '500':
          description: Internal Server Error

  /v1/profile:
    get:
      security: 
        - cookieAccessToken: []
        - headerAccessToken: []
      tags:
        - user
      summary: Get user profile
      description: Get user profile based on provided JWT on either Authorization header or access_token cookie
      operationId: getProfile
      responses:
        '200':
          $ref: '#/components/responses/SuccessUserProfileResponse'
        '401':
          description: JWT token is invalid, expired or inexistent
        '403':
          description: account is inactive
        '500':
          description: Internal Server Error
    put:
      security:
        - cookieAccessToken: []
        - headerAccessToken: []
      tags:
        - user
      summary: Update user profile
      description: Update user profile based on provided JWT on either Authorization header or access_token cookie
      operationId: updateProfile
      requestBody:
        $ref: '#/components/requestBodies/UpdateProfileRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUserProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequestCreateUserResponse'
        '401':
          description: JWT token is invalid, expired or inexistent
        '409':
          description: user with provided info already exists in database
        '403':
          description: account is inactive
        '500':
          description: Internal Server Error
        
components:
  schemas:
    UpdateProfileRepresentation:
      type: object
      properties:
        username:
          type: string
          example: coolusername
    TokenRepresentation:
      type: object
      properties:
        accessToken:
          type: string
          example: 'abcdef1233'
        refreshToken:
          type: string
          example: 'abcdef1233'
    LoginRepresentation:
      type: object
      properties:
        response_type:
          type: string
          enum: ['code', 'token']
        mfa_token:
          type: string
    ApiErrorException:
      type: object
      properties:
        code:
          type: string
          example: 'ERR010'
        message:
          type: string
          example: 'Field username must not be null or empty'
        traceId:
          type: string
          example: 'df438c36-9aa4-11ed-a8fc-0242ac120002'
    UserRepresentation:
      type: object
      properties:
        userId:
          type: string
          example: c223a9f5-7174-4102-aacc-73f03954dde8
        username:
          type: string
          example: cool_username
        isMfaEnabled:
          type: boolean
        isMfaVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  requestBodies:
    UpdateProfileRequest:
      description: User request object required to update a existing user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateProfileRepresentation'
    LoginRequest:
      description: login request body
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/LoginRepresentation'
  
  responses:
    SuccessLoginResponse:
      description: login request returns with status success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRepresentation'
            
    BadRequestLoginResponse:
      description: payload invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorException'
    
    SuccessRefreshResponse:
      description: refresh request returns with status success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRepresentation'
    
    SuccessUserProfileResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRepresentation'

    BadRequestCreateUserResponse:
      description: payload invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorException'
  
  securitySchemes:
    loginAuth:
      type: http
      scheme: basic
    cookieAccessToken:
      type: apiKey
      in: cookie
      name: access_token
    headerAccessToken:
      type: apiKey
      in: header
      name: Authorization
    cookieRefreshToken:
      type: apiKey
      in: cookie
      name: refresh_token