openapi: 3.0.3
info:
  title: Raspstore File Metadata Service
  description: Microservice REST specification of file-info-service endpoints.
  contact:
    email: soon@todo.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:9000/file-info-service
tags:
  - name: files
    description: File Metadata workflow

paths:
  /files:
    get:
      tags:
        - files
      summary: Get All File Metadata from logged in user
      description: |- 
        Get all file metadata based on parameters and accessToken provided.
        This can only be done by the logged in user.
      operationId: findAllFileInfoByLoggedUser
      parameters:
        - $ref: '#/components/parameters/PageQueryParameter'
        - $ref: '#/components/parameters/SizeQueryParameter'
        - $ref: '#/components/parameters/FilenameQueryParameter'
      responses:
        '200':
          $ref: '#/components/responses/SuccessFileMetadataListResponse'
  /files/{fileId}:
    put:
      tags:
        - files
      summary: Update file metadata
      description: |- 
        Update file metadata. 
        This action can only be done by the logged in user
      operationId: updateFileMetadata
      parameters:
        - $ref: '#/components/parameters/FileIdPathParameter'
      requestBody:
        $ref: '#/components/requestBodies/UpdateFileMetadataRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUpdateFileMetadataResponse'
        '400':
          $ref: '#/components/responses/BadRequestUpdateFileMetadataResponse'
        '404':
          description: file info with provided id not found
        '409':
          description: file with provided info already exists in this folder
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
    delete:
      tags:
        - files
      summary: Delete file
      description: |- 
        Removes file metadata and the file itself from the system.
        This can only be done by the logged in user and cannot be undone.
      operationId: deleteFile
      parameters:
        - $ref: '#/components/parameters/FileIdPathParameter'
      responses:
        '204':
          description: File removed successfully
        '400':
          description: Invalid fileId
        '404':
          description: File not found
components:
  schemas:
    UserInfoRepresentation:
      type: object
      properties:
        userId:
          type: string
          example: 63d14f9e9f76d34fa3b0a4a1
        username:
          type: string
          example: cool-username
    FileMetadataRepresentation:
      type: object
      properties:
        fileId:
          type: string
          example: 507f1f77bcf86cd799439011
        path:
          type: string
          example: /folder1/folder2/
        filename:
          type: string
          example: file.txt
        owner:
          type: string
          example: 63d14edc2f4ee7bec256515b
          description: |-
            UserId of the owner of the file. 
            There can exists only one owner per file
        editors:
          type: array
          items:
            $ref: '#/components/schemas/UserInfoRepresentation'
          example:
            - userId: 63d1539be80b85c273d612e4
              username: karl
            - userId: 63d153b097e145d528a1bfbf
              username: johndoe1
        viewers:
          type: array
          items:
            $ref: '#/components/schemas/UserInfoRepresentation'
        createdBy:
          $ref: '#/components/schemas/UserInfoRepresentation'
        updatedBy:
          $ref: '#/components/schemas/UserInfoRepresentation'
        createdAt:
          type: string
          format: date
          pattern: YYYY-MM-DD HH:mm:ss
          example: '2022-10-25 19:43:12'
        UpdatedAt:
          type: string
          format: date
          pattern: YYYY-MM-DD HH:mm:ss
          example: '2022-10-25 19:43:12'
    PageRepresentation:
      type: object
      properties:
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          example: 10
        page:
          type: integer
          example: 1
        next:
          type: string
          example: 'http://localhost:9000/file-info-service/files?page=2&size=10'
    UpdateFileMetadataRepresentation:
      type: object
      properties:
        path:
          type: string
          example: /folder1/folder2/
        filename:
          type: string
          example: coolfile.bpm
        editors:
          type: array
          items:
            type: string
            example: 63d150ccd80a557126f07299
          example: [63d1512264ad3b195c19d8d2, 63d151299970181cc3adcaf1]
        viewers:
          type: array
          items:
            type: string
            example: 63d150ff46156f7cf0c54e1b
          example: [63d1510e09ca8779e148c45c, 63d15115460f5f0da06df1a5]
    ApiErrorException:
      type: object
      properties:
        code:
          type: string
          example: 'ERR010'
        message:
          type: string
          example: 'Field email must not be null or empty'
        traceId:
          type: string
          example: 'df438c36-9aa4-11ed-a8fc-0242ac120002'
  requestBodies:
    UpdateFileMetadataRequest:
      description: |- 
        File Metadata request object required to update a existing file info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateFileMetadataRepresentation'
  parameters:
    FilenameQueryParameter:
      name: filename
      in: query
      schema:
        type: string
        example: cv.pdf
    PageQueryParameter:
      name: page
      required: true
      in: query
      schema:
        type: integer
        example: 1
    SizeQueryParameter:
      name: size
      required: true
      in: query
      schema:
        type: integer
        example: 1
    FileIdPathParameter:
      name: fileId
      in: path
      required: true
      schema:
        type: string
        example: 63d14dfdec04b7ba9c2372f5
    
  responses:
    SuccessUpdateFileMetadataResponse:
      description: File metadata updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileMetadataRepresentation'
    
    BadRequestUpdateFileMetadataResponse:
      description: payload invalid or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorException'
    
    SuccessFileMetadataListResponse:
      description: List of file metadata object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/PageRepresentation'
              - type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileMetadataRepresentation'
    
    InternalServerErrorResponse:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorException'
          example:
            code: "ERR500"
            message: "An expected error occured"
            traceId: "c1611200-9aa5-11ed-a8fc-0242ac120002"
            
    FileMetadataNotFoundErrorResponse:
      description: file metadata with provided id not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorException'
          example:
            code: "ERR404"
            message: "File not found"
            traceId: "c1611200-9aa5-11ed-a8fc-0242ac120002"
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []