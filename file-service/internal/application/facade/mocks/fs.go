// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/facade/fs.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/facade/fs.go -destination=internal/application/facade/mocks/fs.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	os "os"
	reflect "reflect"

	entity "github.com/murilo-bracero/raspstore/file-service/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFileSystemFacade is a mock of FileSystemFacade interface.
type MockFileSystemFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemFacadeMockRecorder
}

// MockFileSystemFacadeMockRecorder is the mock recorder for MockFileSystemFacade.
type MockFileSystemFacadeMockRecorder struct {
	mock *MockFileSystemFacade
}

// NewMockFileSystemFacade creates a new mock instance.
func NewMockFileSystemFacade(ctrl *gomock.Controller) *MockFileSystemFacade {
	mock := &MockFileSystemFacade{ctrl: ctrl}
	mock.recorder = &MockFileSystemFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemFacade) EXPECT() *MockFileSystemFacadeMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockFileSystemFacade) Download(traceId, requesterId, fileId string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", traceId, requesterId, fileId)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockFileSystemFacadeMockRecorder) Download(traceId, requesterId, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockFileSystemFacade)(nil).Download), traceId, requesterId, fileId)
}

// Upload mocks base method.
func (m *MockFileSystemFacade) Upload(traceId string, file *entity.File, src io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", traceId, file, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileSystemFacadeMockRecorder) Upload(traceId, file, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileSystemFacade)(nil).Upload), traceId, file, src)
}
