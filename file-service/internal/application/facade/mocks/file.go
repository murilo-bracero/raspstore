// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/facade/file.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/facade/file.go -destination=internal/application/facade/mocks/file.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/murilo-bracero/raspstore/file-service/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFileFacade is a mock of FileFacade interface.
type MockFileFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFileFacadeMockRecorder
}

// MockFileFacadeMockRecorder is the mock recorder for MockFileFacade.
type MockFileFacadeMockRecorder struct {
	mock *MockFileFacade
}

// NewMockFileFacade creates a new mock instance.
func NewMockFileFacade(ctrl *gomock.Controller) *MockFileFacade {
	mock := &MockFileFacade{ctrl: ctrl}
	mock.recorder = &MockFileFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileFacade) EXPECT() *MockFileFacadeMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockFileFacade) DeleteById(traceId, requesterId, fileId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", traceId, requesterId, fileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockFileFacadeMockRecorder) DeleteById(traceId, requesterId, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockFileFacade)(nil).DeleteById), traceId, requesterId, fileId)
}

// FindAll mocks base method.
func (m *MockFileFacade) FindAll(traceId, requesterId string, page, size int, filename string, secret bool) (*entity.FilePage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", traceId, requesterId, page, size, filename, secret)
	ret0, _ := ret[0].(*entity.FilePage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFileFacadeMockRecorder) FindAll(traceId, requesterId, page, size, filename, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFileFacade)(nil).FindAll), traceId, requesterId, page, size, filename, secret)
}

// FindById mocks base method.
func (m *MockFileFacade) FindById(requesterId, fileId string) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", requesterId, fileId)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFileFacadeMockRecorder) FindById(requesterId, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFileFacade)(nil).FindById), requesterId, fileId)
}
