// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileInfoServiceClient is the client API for FileInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileInfoServiceClient interface {
	CreateFileMetadata(ctx context.Context, in *CreateFileMetadataRequest, opts ...grpc.CallOption) (*FileMetadata, error)
	FindFileMetadataById(ctx context.Context, in *FindFileMetadataByIdRequest, opts ...grpc.CallOption) (*FileMetadata, error)
}

type fileInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileInfoServiceClient(cc grpc.ClientConnInterface) FileInfoServiceClient {
	return &fileInfoServiceClient{cc}
}

func (c *fileInfoServiceClient) CreateFileMetadata(ctx context.Context, in *CreateFileMetadataRequest, opts ...grpc.CallOption) (*FileMetadata, error) {
	out := new(FileMetadata)
	err := c.cc.Invoke(ctx, "/pb.FileInfoService/createFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileInfoServiceClient) FindFileMetadataById(ctx context.Context, in *FindFileMetadataByIdRequest, opts ...grpc.CallOption) (*FileMetadata, error) {
	out := new(FileMetadata)
	err := c.cc.Invoke(ctx, "/pb.FileInfoService/findFileMetadataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileInfoServiceServer is the server API for FileInfoService service.
// All implementations must embed UnimplementedFileInfoServiceServer
// for forward compatibility
type FileInfoServiceServer interface {
	CreateFileMetadata(context.Context, *CreateFileMetadataRequest) (*FileMetadata, error)
	FindFileMetadataById(context.Context, *FindFileMetadataByIdRequest) (*FileMetadata, error)
	mustEmbedUnimplementedFileInfoServiceServer()
}

// UnimplementedFileInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileInfoServiceServer struct {
}

func (UnimplementedFileInfoServiceServer) CreateFileMetadata(context.Context, *CreateFileMetadataRequest) (*FileMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileMetadata not implemented")
}
func (UnimplementedFileInfoServiceServer) FindFileMetadataById(context.Context, *FindFileMetadataByIdRequest) (*FileMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileMetadataById not implemented")
}
func (UnimplementedFileInfoServiceServer) mustEmbedUnimplementedFileInfoServiceServer() {}

// UnsafeFileInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileInfoServiceServer will
// result in compilation errors.
type UnsafeFileInfoServiceServer interface {
	mustEmbedUnimplementedFileInfoServiceServer()
}

func RegisterFileInfoServiceServer(s grpc.ServiceRegistrar, srv FileInfoServiceServer) {
	s.RegisterService(&FileInfoService_ServiceDesc, srv)
}

func _FileInfoService_CreateFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoServiceServer).CreateFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileInfoService/createFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoServiceServer).CreateFileMetadata(ctx, req.(*CreateFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileInfoService_FindFileMetadataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileMetadataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoServiceServer).FindFileMetadataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileInfoService/findFileMetadataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoServiceServer).FindFileMetadataById(ctx, req.(*FindFileMetadataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileInfoService_ServiceDesc is the grpc.ServiceDesc for FileInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileInfoService",
	HandlerType: (*FileInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createFileMetadata",
			Handler:    _FileInfoService_CreateFileMetadata_Handler,
		},
		{
			MethodName: "findFileMetadataById",
			Handler:    _FileInfoService_FindFileMetadataById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/file-info-service.proto",
}
